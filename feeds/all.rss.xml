<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HiPS client for Python : A GSoC project</title><link>/</link><description></description><atom:link href="/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 11 Jun 2017 12:58:00 +0500</lastBuildDate><item><title>Type annotations in Python 3.6 and using Mypy as a static type checker</title><link>/type-annotations-in-python-36-and-using-mypy-as-a-static-type-checker.html</link><description>&lt;p&gt;The main goal of type annotations is to open up Python code to easier static analysis and refactoring, potential runtime type checking, and (perhaps, in some contexts) code generation utilizing type information. These were introduced in &lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this regards, static type checking is the most important. It allows support for off-line third-party type checkers, such as Mypy.&lt;/p&gt;
&lt;h3&gt;Purpose of annotations&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;typing&lt;/code&gt; module in Python 3.6 contains many definitions that are useful in statically typed code. For instance, the &lt;code&gt;Any&lt;/code&gt; type is used by default for every argument and return type of a function. This is all in regards to a checked function. If a function is to be ignored by a static type checker, the decorator &lt;code&gt;@no_type_check&lt;/code&gt; should be used. This function will now be treated as having no type annotations.&lt;/p&gt;
&lt;p&gt;An example following the type annotations is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;scalar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This states that the expected type of the &lt;code&gt;scalar&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; argument is &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt;, respectively. Analogically, the expected return type is also &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The acceptable type hints that may be used are:  &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Any&lt;/code&gt;, &lt;code&gt;Union&lt;/code&gt;, &lt;code&gt;Tuple&lt;/code&gt; , &lt;code&gt;Callable&lt;/code&gt;, all types exported from &lt;code&gt;typing&lt;/code&gt; (e.g. &lt;code&gt;Sequence&lt;/code&gt; and &lt;code&gt;Dict&lt;/code&gt; ), type variables, and type aliases. &lt;/p&gt;
&lt;h4&gt;Using type aliases&lt;/h4&gt;
&lt;p&gt;Type aliases can be defined by using simple variable assignments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Creating your own types&lt;/h4&gt;
&lt;p&gt;In Python 3.5 a new function was introduced called &lt;code&gt;NewType&lt;/code&gt;. This allows the programmer to create distinct types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;

&lt;span class="n"&gt;UserId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;UserId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;some_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;356&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Static type checking using Mypy&lt;/h3&gt;
&lt;p&gt;When a script is run with a standard Python interpreter, the type annotations are treated primarily as comments. Using &lt;code&gt;mypy&lt;/code&gt;, common code bugs can be found and it checks the code for proper return types etc. As &lt;code&gt;mypy&lt;/code&gt; is a static analyzer, it does not interfere when running the program. A function without a type annotation is considered dynamically typed.&lt;/p&gt;
&lt;p&gt;Let's run &lt;code&gt;mypy&lt;/code&gt; for checking a class method I wrote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_file_properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;list_properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;key_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;list_properties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;key_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# The case where a property contains comment or a blank line&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function takes in a &lt;code&gt;=&lt;/code&gt; separated string, parses it using &lt;code&gt;split()&lt;/code&gt;, and returns it as an ordered dictionary. When I run &lt;code&gt;mypy&lt;/code&gt; from a terminal, issuing the command &lt;code&gt;python -m mypy hips/tiles&lt;/code&gt;, I get no error or warning, so my type annotations were correct.&lt;/p&gt;
&lt;p&gt;However, If I change the function header to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_file_properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I get these error messages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hips/tiles/description.py:61: error: "int" has no attribute "split"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The illustration below shows the basic workflow of static type checking:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Static type checking" src="/images/static_typing.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sun, 11 Jun 2017 12:58:00 +0500</pubDate><guid>tag:,2017-06-11:type-annotations-in-python-36-and-using-mypy-as-a-static-type-checker.html</guid></item><item><title>An overview of Hierarchical Progressive Surveys (HiPS) and the HEALPix framework</title><link>/an-overview-of-hierarchical-progressive-surveys-hips-and-the-healpix-framework.html</link><description>&lt;p&gt;HiPS utilizes the HEALPix framework and uses it for mapping a sphere (in this case, part of a sky) and compiles / transforms it into &lt;a href="#hips-tiles"&gt;tiles&lt;/a&gt; and &lt;a href="#hips-pixels"&gt;pixels&lt;/a&gt;. Of course, this is in context of astronomical data. HiPS emphasizes on usability thus it tries abstract the scientific details while preserving them. This can be further built upon for statistical analysis of large datasets. Thus, first a brief overview of HEALPix is given below before moving onto HiPS.&lt;/p&gt;
&lt;h3&gt;Introduction to HEALPix&lt;/h3&gt;
&lt;p&gt;HEALPix, an acronym of 'Hierarchical Equal Area isoLatitude Pixelization of a sphere', is a framework for discretizing high resolution data. The software is available in C, C++, Fortran90, IDL, Java, and Python. It extends a data structure (with a library), for each language. The main features provided by the software are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pixel manipulation&lt;/li&gt;
&lt;li&gt;Spherical Harmonics Transforms&lt;/li&gt;
&lt;li&gt;Visualization&lt;/li&gt;
&lt;li&gt;Input / Output (supports FITS files)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a nutshell, the pixelization procedure subdivides a spherical sphere in which each pixel is equidistant from the origin - meaning it covers the same surface area. This produces a HEALPix grid, whose interesting property is that pixels are distributed on lines of constant latitude. Due to this iso-latitude distribution of pixels the complexity for computing integrals over each harmonics is N&lt;sup&gt;1/2&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;HEALPix provides a standard format on how to store data in FITS files.  There are numerous software packages that can work with HEALPix data. For this project, &lt;code&gt;healpy&lt;/code&gt; will be used which is built on the HEALPix C++ package. But there are others, e.g. in Aladin Lite. The main functionality needed for this project is HEALPix pixel index to sky coordinate transformation (back and forth), and one or two methods to list HEALPix pixels in a given region of the sky (e.g. &lt;code&gt;query_disc&lt;/code&gt; from &lt;code&gt;healpy&lt;/code&gt;).&lt;/p&gt;
&lt;h4&gt;Pixel numbering schemes&lt;/h4&gt;
&lt;p&gt;HEALPix provides two numbering schemes for pixels, namely the &lt;strong&gt;RING scheme&lt;/strong&gt; and &lt;strong&gt;NESTED scheme&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RING scheme&lt;/strong&gt;
In this scheme the pixels are counted down from north to south along each iso-latitude ring.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NESTED scheme&lt;/strong&gt;
 This scheme arranges the pixels into 12 tree structures with respect to their base-resolution pixels.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="HEALPix projection" src="/images/HEALPix_projection_SW.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Introduction to HiPS&lt;/h3&gt;
&lt;p&gt;HiPS is the hierarchical tiling mechanism which allows one to access, visualize and browse seamlessly image, catalogue and cube data. The original HiPS paper can be found &lt;a href="https://arxiv.org/pdf/1505.02291.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;HiPS working&lt;/h3&gt;
&lt;p&gt;The multi-resolution representation of original images provides the basis for visualizing data in a progressive way as the pixels that are required for a given view can be accessed through pre-computed HEALPix maps, and the nested pixel numbering scheme provides a simple hierarchical indexing system that encodes pixel inheritance across different orders.&lt;/p&gt;
&lt;p&gt;HiPS scheme groups pixels into different tiles. The general relationship between tiles and pixels is that a tile with &lt;code&gt;n-tile&lt;/code&gt; pixels along each side forms a HEALPix mesh of order k&lt;sup&gt;tile&lt;/sup&gt;. Tiles store map information from HEALPix. These tiles are presented as square arrays and it is possible to store them in different file formats. The files are organized into different directories. Here tiles are used as files and tile orders are used for grouping data in directories - all following a naming convention. For more information on the method on file storage, &lt;a href="http://aladin.unistra.fr/hips/hipsdoc.pdf"&gt;this&lt;/a&gt; document can be viewed, written by Pierre Fernique.&lt;/p&gt;
&lt;h3&gt;HiPS pixels&lt;/h3&gt;
&lt;p&gt;Using the header &lt;code&gt;hips_pixel_bitpix&lt;/code&gt; the HiPS pixels are stored in BITPIX code. &lt;code&gt;hips_pixel_bitpix&lt;/code&gt; refers to the data type used to store the FITS tile (a value of 8 means 8-bits integers, -32 means simple floating points, -64 double precision floating points).&lt;/p&gt;
&lt;p&gt;This is usually the same value as the BITPIX value of the original images (described in keyword data_pixel_bitpix), but might be different, notably for HiPS built from heterogeneous origins.&lt;/p&gt;
&lt;p&gt;The BITPIX value is always present in the HiPS FITS tiles.&lt;/p&gt;
&lt;h3&gt;HiPS tiles&lt;/h3&gt;
&lt;p&gt;As it is cumbersome to transfer each pixel (essentially a file), so HiPS scheme groups pixels into different tiles. The general relationship between the tiles and pixels is that a tile with &lt;em&gt;n&lt;/em&gt;-tile pixels along each
side forms a HEALPix mesh of order of &lt;em&gt;k&lt;/em&gt;-tile. A HiPS tile is show below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A HiPS tile" src="/images/hips-tile.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;HiPS images&lt;/h3&gt;
&lt;p&gt;The way HiPS represents images is by resampling them onto a HEALPix grid at the maximum desired order, say k&lt;sup&gt;max&lt;/sup&gt;. Then it generates tile images for tile orders. When mosaicking / stitching images, the angular resolution is taken into account. There are various methods for filling the data region when stitching images and dealing with background difference. The k&lt;sup&gt;max&lt;/sup&gt; chosen earlier determines minimum pixel size which is near to the angular pixel size or the resolution of original data.&lt;/p&gt;
&lt;p&gt;Next important thing is whether to emphasize on &lt;code&gt;display quality&lt;/code&gt; or &lt;code&gt;photometric accuracy&lt;/code&gt;, which depends on our use case. Image encoding can be done either in &lt;strong&gt;FITS&lt;/strong&gt;, &lt;strong&gt;PNG&lt;/strong&gt;, or &lt;strong&gt;JPG&lt;/strong&gt; file format. For most cases it is enough to only generate FITS and PNG files. The lowest order pixel values correspond to a large area of the sky. The HiPS indexing structure takes care of mapping correct tiles onto a display.&lt;/p&gt;
&lt;p&gt;HiPS generation for huge amounts of data such as the Hubble Space Telescope requires planning of system growth.&lt;/p&gt;
&lt;h3&gt;HiPS catalogues&lt;/h3&gt;
&lt;p&gt;A HiPS catalogue contains the RA / DEC coordinates stored in a TSV file. The data is ASCII tab separated and is organized in various directories the same way as HiPS images.&lt;/p&gt;
&lt;h3&gt;Google Summer of Code project&lt;/h3&gt;
&lt;p&gt;I have been selected for creating this package along with two mentors, &lt;a href="https://github.com/cdeil"&gt;Christoph Deil&lt;/a&gt; and  &lt;a href="https://github.com/tboch"&gt;Thomas Boch&lt;/a&gt;. My GSoC application can be found &lt;a href="https://github.com/adl1995/HIPS-to-Py/blob/master/documents/application.md"&gt;here&lt;/a&gt;. The goal of this project is to design and create a Python client for Hierarchical Progressive Surveys (HiPS). The library will extend a low and high level API for exploring and creating WCS / HEALPix images. Currently, there are other clients built using HiPS, such as Aladin and Aladin Lite, but they are written in Java and JavaScript, respectively. After the trivial functionality is complete, additional features such as measuring fluxes and overplotting multi-wavelength data will also be added. The code repository for this project can be found &lt;a href="https://github.com/hipspy/hips"&gt;here&lt;/a&gt;.  If anyone has any questions or suggestions regarding the package, they are encouraged to open issues. If you want to help us build the package or add extra features onto it, please open up a pull request.&lt;/p&gt;
&lt;p&gt;The coding period is about to begin. My future blog posts will be based around this topic.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Wed, 31 May 2017 19:39:00 +0500</pubDate><guid>tag:,2017-05-31:an-overview-of-hierarchical-progressive-surveys-hips-and-the-healpix-framework.html</guid></item><item><title>An introduction to coordinate systems used in astronomy</title><link>/an-introduction-to-coordinate-systems-used-in-astronomy.html</link><description>&lt;p&gt;Before moving on to the coordinate systems, listed below are some common measures used in astronomical studies.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;RA / DEC&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;RA (right ascension) and DEC (declination) are the longitudes and latitudes of the sky. RA corresponds to east/west direction (like longitude), while Dec measures north/south directions, like latitude.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;WCS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;World Coordinate System (WCS) is a set of transformations that map pixel locations in an image to their real-world units, such as their position on the sky sphere. These transformations can work both forward (from pixel to sky) and backward (from sky to pixel).&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;FITS WCS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The FITS "World Coordinate System" (WCS) standard defines keywords and usage that provides for the description of astronomical coordinate systems in a FITS image header.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;FITS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Flexible Image Transport System (FITS) is a digital file format useful for storage, transmission and processing of scientific and other images, used by default by many sky tessellation softwares - in this case, HEALPix.&lt;/p&gt;
&lt;p&gt;HEALPix header files can contain the following three letters, each depicting the coordinate system being used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;:Celestial=ICRS=RA/DEC(equatorial)=FK5 J2000 (default)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G&lt;/strong&gt;:Galactic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;:Ecliptic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;International Celestial Reference System&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ICRS is the current standard celestial reference system adopted by the International Astronomical Union (IAU). Its &lt;strong&gt;origin is at the barycenter of the Solar System&lt;/strong&gt;, with axes that are intended to be "fixed" with respect to space - this is referred to as International Celestial Reference Frame (ICRF). ICRS coordinates are approximately the same as equatorial coordinates:&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Fifth Fundamental Catalogue&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;FK5 is part of the "Catalogue of Fundamental Stars" which provides a series of six astrometric catalogues of high precision positional data for a small selection of stars to define a celestial reference frame. J2000 refers to the instant of 12pm (midday) on 1st January 2000. FK5, publish in 1991, added 3,117 new stars.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Galactic coordinate system&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The galactic coordinate system is a celestial coordinate system in spherical coordinates, with its &lt;strong&gt;origin at the Sun&lt;/strong&gt;, the primary direction aligned with the approximate center of the Milky Way galaxy, and the fundamental plane parallel to an approximation of the galactic plane but offset to its north. GCS has its own Galactic longitude and Galactic latitude.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Ecliptic coordinate system&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A celestial coordinate system commonly used for representing the positions and orbits of Solar System objects. The system's &lt;strong&gt;origin can be either the center of the Sun or the center of the Earth&lt;/strong&gt;, its primary direction is towards the vernal (northbound) equinox, and it follows a right-handed convention.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Tue, 23 May 2017 12:37:00 +0500</pubDate><guid>tag:,2017-05-23:an-introduction-to-coordinate-systems-used-in-astronomy.html</guid></item><item><title>A comparison of response times using URLLib, GRequests, and asyncio</title><link>/a-comparison-of-response-times-using-urllib-grequests-and-asyncio.html</link><description>&lt;p&gt;For the HiPS client as multiple tiles have to be fetched for time efficiency, concurrency has to be achieved. So, a comparison was done utilizing Python's &lt;code&gt;threading&lt;/code&gt; library. The elapsed time was calculated using &lt;code&gt;time&lt;/code&gt;. For fetching the tiles &lt;code&gt;urllib&lt;/code&gt;, &lt;code&gt;grequests&lt;/code&gt;, &lt;code&gt;aiohttp&lt;/code&gt;, &lt;code&gt;asyncio&lt;/code&gt; were used. The survey chosen was &lt;code&gt;alasky.u-strasbg.fr&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;For fetching 10 tiles, it took the following mentioned time (in seconds):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;3.5430831909179688&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;0.388397216796875&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;0.3900480270385742&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;GRequests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.6238431930541992&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, for fetching 100 tiles, it took:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;37.7027428150177&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;5.575664043426514&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;2.4697625637054443&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;GRequests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.273705244064331&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The pros of &lt;code&gt;grequests&lt;/code&gt; is that it takes less time when large number of requests have to be sent. But &lt;code&gt;urllib&lt;/code&gt; (with threading) gives a better response time when requests are numerous.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;aiohttp&lt;/code&gt; with &lt;code&gt;asyncio&lt;/code&gt; seems to be the best option. Its response time is almost 50% less than &lt;code&gt;grequests&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The full source code can be found &lt;a href="https://github.com/adl1995/HIPS-to-Py/blob/master/examples/fetch-tiles-threaded.py"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Tue, 09 May 2017 15:54:00 +0500</pubDate><guid>tag:,2017-05-09:a-comparison-of-response-times-using-urllib-grequests-and-asyncio.html</guid></item><item><title>My First Article</title><link>/my-first-article.html</link><description>&lt;p&gt;Hello World!&lt;/p&gt;
&lt;p&gt;This blog will be extensively used for posting GSoC updates, apart from other technical ramblings.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adeel Ahmad</dc:creator><pubDate>Sun, 19 Mar 2017 22:45:00 +0500</pubDate><guid>tag:,2017-03-19:my-first-article.html</guid></item></channel></rss>