<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Personal Blog</title><link href="/" rel="alternate"></link><link href="/feeds/review.atom.xml" rel="self"></link><id>/</id><updated>2017-05-09T15:54:00+02:00</updated><entry><title>A comparison of response times using URLLib, GRequests, and asyncio</title><link href="/a-comparison-of-response-times-using-urllib-grequests-and-asyncio.html" rel="alternate"></link><updated>2017-05-09T15:54:00+02:00</updated><author><name>Adeel Ahmad</name></author><id>tag:,2017-05-09:a-comparison-of-response-times-using-urllib-grequests-and-asyncio.html</id><summary type="html">&lt;p&gt;For the HiPS client as multiple tiles have to be fetched for time efficiency, concurrency has to be achieved. So, a comparison was done utilizing Python's &lt;code&gt;threading&lt;/code&gt; library. The elapsed time was calculated using &lt;code&gt;time&lt;/code&gt;. For fetching the tiles &lt;code&gt;urllib&lt;/code&gt;, &lt;code&gt;grequests&lt;/code&gt;, &lt;code&gt;aiohttp&lt;/code&gt;, &lt;code&gt;asyncio&lt;/code&gt; were used. The survey chosen was &lt;code&gt;alasky.u-strasbg.fr&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;For fetching 10 tiles, it took the following mentioned time (in seconds):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;3.5430831909179688&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;0.388397216796875&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;0.3900480270385742&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;GRequests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.6238431930541992&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, for fetching 100 tiles, it took:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;37.7027428150177&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;5.575664043426514&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;URLLib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="mf"&gt;2.4697625637054443&lt;/span&gt;
&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="n"&gt;GRequests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.273705244064331&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The pros of &lt;code&gt;grequests&lt;/code&gt; is that it takes less time when large number of requests have to be sent. But &lt;code&gt;urllib&lt;/code&gt; (with threading) gives a better response time when requests are numerous.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;aiohttp&lt;/code&gt; with &lt;code&gt;asyncio&lt;/code&gt; seems to be the best option. Its response time is almost 50% less than &lt;code&gt;grequests&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The full source code can be found &lt;a href="https://github.com/adl1995/HIPS-to-Py/blob/master/examples/fetch-tiles-threaded.py"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>My First Article</title><link href="/my-first-article.html" rel="alternate"></link><updated>2017-03-19T22:45:00+01:00</updated><author><name>Adeel Ahmad</name></author><id>tag:,2017-03-19:my-first-article.html</id><summary type="html">&lt;p&gt;Hello World!&lt;/p&gt;
&lt;p&gt;This blog will be extensively used for posting GSoC updates, apart from other technical ramblings.&lt;/p&gt;</summary></entry></feed>